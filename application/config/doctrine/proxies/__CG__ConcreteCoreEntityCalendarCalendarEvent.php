<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Entity\Calendar;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CalendarEvent extends \Concrete\Core\Entity\Calendar\CalendarEvent implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'selectedVersion', 'calendar', 'versions', 'workflow_progress_objects', 'summary_templates', 'custom_summary_templates', 'hasCustomSummaryTemplates', 'eventID'];
        }

        return ['__isInitialized__', 'selectedVersion', 'calendar', 'versions', 'workflow_progress_objects', 'summary_templates', 'custom_summary_templates', 'hasCustomSummaryTemplates', 'eventID'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CalendarEvent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getOccurrenceList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOccurrenceList', []);

        return parent::getOccurrenceList();
    }

    /**
     * {@inheritDoc}
     */
    public function getOccurrences()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOccurrences', []);

        return parent::getOccurrences();
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendar', []);

        return parent::getCalendar();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalendar(\Concrete\Core\Entity\Calendar\Calendar $calendar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalendar', [$calendar]);

        return parent::setCalendar($calendar);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendarID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendarID', []);

        return parent::getCalendarID();
    }

    /**
     * {@inheritDoc}
     */
    public function getID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getID', []);

        return parent::getID();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersions', []);

        return parent::getVersions();
    }

    /**
     * {@inheritDoc}
     */
    public function getSelectedVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSelectedVersion', []);

        return parent::getSelectedVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setSelectedVersion($selectedVersion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSelectedVersion', [$selectedVersion]);

        return parent::setSelectedVersion($selectedVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getApprovedVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApprovedVersion', []);

        return parent::getApprovedVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getRecentVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecentVersion', []);

        return parent::getRecentVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $arguments]);

        return parent::__call($name, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectAttributeCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjectAttributeCategory', []);

        return parent::getObjectAttributeCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeValueObject($ak, $createIfNotExists = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeValueObject', [$ak, $createIfNotExists]);

        return parent::getAttributeValueObject($ak, $createIfNotExists);
    }

    /**
     * {@inheritDoc}
     */
    public function isPending()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPending', []);

        return parent::isPending();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasCustomSummaryTemplates($hasCustomSummaryTemplates): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasCustomSummaryTemplates', [$hasCustomSummaryTemplates]);

        parent::setHasCustomSummaryTemplates($hasCustomSummaryTemplates);
    }

    /**
     * {@inheritDoc}
     */
    public function getSummaryIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummaryIdentifier', []);

        return parent::getSummaryIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getSummaryCategoryHandle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummaryCategoryHandle', []);

        return parent::getSummaryCategoryHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function clearCustomSummaryTemplates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearCustomSummaryTemplates', []);

        return parent::clearCustomSummaryTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function getSummaryTemplatesCollection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummaryTemplatesCollection', []);

        return parent::getSummaryTemplatesCollection();
    }

    /**
     * {@inheritDoc}
     */
    public function getSummaryTemplates(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummaryTemplates', []);

        return parent::getSummaryTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCustomSummaryTemplates(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCustomSummaryTemplates', []);

        return parent::hasCustomSummaryTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomSelectedSummaryTemplates(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomSelectedSummaryTemplates', []);

        return parent::getCustomSelectedSummaryTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute($ak, $mode = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute', [$ak, $mode]);

        return parent::getAttribute($ak, $mode);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeValue($ak)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeValue', [$ak]);

        return parent::getAttributeValue($ak);
    }

    /**
     * {@inheritDoc}
     */
    public function clearAttribute($ak, bool $doReindexImmediately = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearAttribute', [$ak, $doReindexImmediately]);

        return parent::clearAttribute($ak, $doReindexImmediately);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute($ak, $value, $doReindexImmediately = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', [$ak, $value, $doReindexImmediately]);

        return parent::setAttribute($ak, $value, $doReindexImmediately);
    }

}
