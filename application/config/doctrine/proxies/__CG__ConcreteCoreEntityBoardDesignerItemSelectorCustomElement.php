<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Entity\Board\Designer;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ItemSelectorCustomElement extends \Concrete\Core\Entity\Board\Designer\ItemSelectorCustomElement implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'items', 'contentObjectCollection', 'slotTemplate', 'id', 'elementName', 'author', 'dateCreated', 'batchIdentifier', 'status'];
        }

        return ['__isInitialized__', 'items', 'contentObjectCollection', 'slotTemplate', 'id', 'elementName', 'author', 'dateCreated', 'batchIdentifier', 'status'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ItemSelectorCustomElement $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItems', []);

        return parent::getItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentObjectCollection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentObjectCollection', []);

        return parent::getContentObjectCollection();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentObjectCollection($contentObjectCollection): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentObjectCollection', [$contentObjectCollection]);

        parent::setContentObjectCollection($contentObjectCollection);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlotTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlotTemplate', []);

        return parent::getSlotTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlotTemplate($slotTemplate): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlotTemplate', [$slotTemplate]);

        parent::setSlotTemplate($slotTemplate);
    }

    /**
     * {@inheritDoc}
     */
    public function createBlock(): \Concrete\Core\Block\Block
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createBlock', []);

        return parent::createBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function getID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getID', []);

        return parent::getID();
    }

    /**
     * {@inheritDoc}
     */
    public function getElementName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getElementName', []);

        return parent::getElementName();
    }

    /**
     * {@inheritDoc}
     */
    public function setElementName($elementName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setElementName', [$elementName]);

        parent::setElementName($elementName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', []);

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated($dateCreated): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', [$dateCreated]);

        parent::setDateCreated($dateCreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getBatchIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBatchIdentifier', []);

        return parent::getBatchIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function setBatchIdentifier($batchIdentifier): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBatchIdentifier', [$batchIdentifier]);

        parent::setBatchIdentifier($batchIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreatedDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreatedDateTime', []);

        return parent::getDateCreatedDateTime();
    }

}
