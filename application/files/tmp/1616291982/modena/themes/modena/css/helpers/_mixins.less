// .for

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
.for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// .for-each

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}


.triangle(@border-1, @border-2, @border-3, @color) {
    border-left: @border-1 solid transparent;
    border-right: @border-2 solid transparent;
    border-bottom: @border-3 solid @color;
}

.border-radius(@radius) {
    border-radius: @radius;
    background-clip: padding-box;
}

.border-top-radius(@radius-right, @radius-left) {
    border-top-right-radius: @radius-right;
    border-top-left-radius: @radius-left;
    background-clip: padding-box;
}

.border-right-radius(@radius-right, @radius-left) {
    border-bottom-right-radius: @radius-right;
    border-top-right-radius: @radius-left;
    background-clip: padding-box;
}

.border-bottom-radius(@radius-right, @radius-left) {
    border-bottom-right-radius: @radius-right;
    border-bottom-left-radius: @radius-left;
    background-clip: padding-box;
}

.border-left-radius(@radius-left, @radius-right) {
    border-bottom-left-radius: @radius-left;
    border-top-left-radius: @radius-right;
    background-clip: padding-box;
}

.button-bg(@bg) {
    background: @bg;
    &:hover {
        background:darken(@bg,10%);
    }
    &:active {
        background:darken(@bg,25%);
    }
}

.button-ghost(@size, @border-color, @border-hover, @text-color) {
    border: @size solid @border-color;
    background: none !important;
    color: @text-color;
    &:hover {
        border: @size solid @border-hover;
        color: @border-hover;
        background: none;
    }
}

.transition(@time, @prop, @easing: null) {
    transition-duration: @time;
    transition-property: @prop;
    transition-timing-function: @easing;
}
